Jour 20 AOC 2020 -> chiant

struct Tile {
    int id;
    vector<bitset<10>> sides;
    vector<vector<bool>> grid;
    bitset<4> used; // edge is used (0 is top, 1 is right)
    int pos = 0;

    void rotate() { // may work fine -> rotate tile trigo way
        bool tmp = used[3];
        used <<= 1;
        used[0] = tmp;
        auto tmp2 = sides[3];
        for (int i = 3; i > 0; i--)
            sides[i] = sides[i - 1];
        sides[0] = tmp2;
    }

    bool operator<(const Tile &rhs) const {
        return used.count() < rhs.used.count();
    }

    bool operator>(const Tile &rhs) const {
        return rhs < *this;
    }

    bool operator<=(const Tile &rhs) const {
        return !(rhs < *this);
    }

    bool operator>=(const Tile &rhs) const {
        return !(*this < rhs);
    }

};

void print_tile(const Tile &t) { // works bad
    cout << "Tile " << t.id << ":" << endl;
    for (int i = 0; i < 10; i++) {
        cout << (t.sides[0][i] ? '#' : '.');
    }
    cout << endl;
    for (int i = 1; i <= 8; i++) {
        cout << (t.sides[2][i] ? '#' : '.') << "        " << (t.sides[3][i] ? '#' : '.') << endl;
    }
    for (int i = 0; i < 10; i++) {
        cout << (t.sides[1][i] ? '#' : '.');
    }
    cout << endl << endl;
}

bitset<10> reverse_bitset(const bitset<10> &b) {
    bitset<10> res;
    for (int l = 0; l < 10; l++) {
        res[9 - l] = b[l];
    }
    return res;
}

int main() {
//    ios_base::sync_with_stdio(false);
//    cin.tie(nullptr);
    vector<Tile> tiles;
    string in;
    while (!cin.eof()) {
        getline(in);
        int id = stoi(in.substr(5, in.size() - 2));
        vector<bitset<10>> sides(4);
        vector<vector<bool>> grid(10, vector<bool>(10));
        getline(in);
        for (int i = 0; i < 10; i++) {
            sides[0][i] = in[i] == '#';
            grid[0][i] = in[i] == '#';
        }
        sides[3][9] = in[0] == '#';
        sides[1][0] = in[9] == '#';
        for (int i = 1; i <= 8; i++) {
            getline(in);
            for (int j = 0; j < 10; j++) {
                sides[i][j] = in[j] == '#';
                grid[i][j] = in[j] == '#';
            }
            sides[3][9-i] = in[0] == '#';
            sides[1][i] = in[9] == '#';
        }
        getline(in);
        for (int i = 0; i < 10; i++) {
            sides[2][i] = in[i] == '#';
            grid[9][i] = in[i] == '#';
        }
        sides[2] = reverse_bitset(sides[2]);
        sides[3][0] = in[0] == '#';
        sides[1][9] = in[9] == '#';
        tiles.push_back({id, sides, grid, bitset<4>(0)});
        getline(in);
        print_tile(tiles[tiles.size() - 1]);
    }
    // test

    print_tile(tiles[0]);
    tiles[0].rotate();
    print_tile(tiles[0]);


    auto n = tiles.size();
    vector<Tile> processed_tiles;
    processed_tiles.push_back(tiles[0]);
    tiles.erase(tiles.begin());
    while (processed_tiles.size() < n) {
        for (Tile t: tiles) {
            auto top = t.sides[0];
            auto bot = t.sides[1];
            auto left = t.sides[2];
            auto right = t.sides[3];
            for (auto &t2: processed_tiles) {
                for (int i = 0; i < 4; i++) {
                    if (!t2.used[i]) {
                        if (top == t2.sides[i]);
                    }
                }
            }
        }
    }
    ull cnt = 1;
    for (const Tile &t: tiles) {
        if (t.used.count() == 0) {
            cout << t.id << endl;
            cnt *= t.id;
        }
    }
    println(cnt);
    return 0;
}


Jour 19 AOC 2020 -> recoder prolog --'
void generate(const list<int> &l, const vector<set<pair<int, int>>> &dependencies, const map<int, char> &terminals,
              const unsigned long &m, set<string> &res) {
    if (l.size() > m) return;
    bool all_terminals = true;
    int i = 0;
    for (auto it = l.begin(); it != l.end(); it++) {
        if (terminals.find(*it) == terminals.end()) {
            all_terminals = false;
            for (auto x : dependencies[*it]) {
                list<int> nl(l);
                auto it2 = nl.begin();
                for (int j = 0; j < i; j++)it2++;
                nl.insert(it2, x.first);
                if (x.second != -1)
                    nl.insert(it2, x.second);
                nl.erase(it2);
                generate(nl, dependencies, terminals, m, res);
            }

        }
        i++;
    }
    if (all_terminals) {
        string s;
        for (auto x:l) {
            s.push_back(terminals.find(x)->second);
        }
        res.insert(s);
    }

}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    vector<set<pair<int, int>>> dependencies(135);
    string in;
    map<int, char> terminals;
    while (true) {
        getline(in);
        if (in.empty()) break;
        auto sp = split(in);
        int ind = stoi(sp[0].substr(0, sp[0].size() - 1));
        in = in.substr(sp[0].size() + 1, in.size());
        if (in[0] == '"') {
            terminals.insert({ind, in[1]});
            continue;
        }
        sp = split(in, '|');
        for (auto &x: sp) {
            auto tmp = split(x);
            if (tmp.size() == 1) {
                dependencies[ind].insert({stoi(tmp[0]), -1});
            } else {
                dependencies[ind].insert({stoi(tmp[0]), stoi(tmp[1])});
            }
        }
    }
    for (auto &t: terminals) {
        print("nonterm(");
        print(t.first);
        println(").");
    }
    for (uint i = 0; i < dependencies.size(); i++)
        for (auto &d: dependencies[i]) {
            if (d.second == -1) {
                print("nonterm(");
                print(i);
                println("):-");
                print("\tnonterm(");
                print(d.first);
                println(").");
            } else {
                print("nonterm(");
                print(i);
                println("):-");
                print("\tnonterm(");
                print(d.first);
                print("),\n\tnonterm(");
                print(d.second);
                println(").");
            }
        }
    vector<string> strings;
    unsigned long m = 0;
    while (!cin.eof()) {
        getline(in);
        strings.push_back(in);
        m = std::max(m, in.size());
    }
    println("res(X):-");
    for (int j = 0; j < strings.size() - 1; j++) {
        string st = strings[j];
        print("\tsolve([");
        for (int i = 0; i < st.size() - 1; i++) {
            cout << ((st[i] == 'a') ? 116 : 127) << ", ";
        }
        cout << (st[st.size() - 1] == 'a' ? 116 : 127) << "]) ; " << endl;
    }
    string st = strings[strings.size() - 1];
    print("\tsolve([");
    for (int i = 0; i < st.size() - 1; i++) {
        cout << ((st[i] == 'a') ? 116 : 127) << ", ";
    }
    cout << (st[st.size() - 1] == 'a' ? 116 : 127) << "])." << endl;
    /*set<string> res;
    list<int> l;
    l.push_back(0);
    generate(l, dependencies, terminals, m, res);
    ll cnt = 0;
    for (auto &s: strings) {
        cnt += res.find(s) != res.end();
    }
    println(cnt);*/
    return 0;
}

for (ll k = 0; k < 6; k++) {
        ll n;
        cin >> n;
        vector<ll> nums(n);
        ll ind_max = 0;
        ll maxi = -INF;
        for (ll i = 0; i < n; i++) {
            cin >> nums[i];
            if (nums[i] > maxi) {
                maxi = max(maxi, nums[i]);
                ind_max = i;
            }
        }
        reverse(nums.begin() + ind_max + 1, nums.end());
        vector<ll> dp1, dp2;
        for (ll i = 0; i <= ind_max; i++) {
            auto it = std::lower_bound(dp1.begin(), dp1.end(), nums[i]);
            if (it == dp1.end()) {
                dp1.push_back(nums[i]);
            } else {
                *it = nums[i];
            }
        }
        for (ll i = ind_max + 1; i < n; i++) {
            auto it = std::lower_bound(dp2.begin(), dp2.end(), nums[i]);
            if (it == dp2.end()) {
                dp2.push_back(nums[i]);
            } else {
                *it = nums[i];
            }
        }
        cout << dp1.size() + dp2.size() << endl;
    }





Sliding Cost

#include <iostream>
#include <algorithm>
#include <queue>
#include <unordered_map>
#include <map>
#include <list>
#include <vector>
#include <set>
#include <iterator>
#include <cmath>

using ll = long long;
using std::ios, std::cin, std::cout, std::vector, std::pair;
#define endl "\n"
#define MOD ll(1e9+7)

int main() {
//    ios::sync_with_stdio(false);
//    cin.tie(nullptr);
    ll n, k, ignored, cpt = 0, first;
    cin >> n >> k;
    if (k == 1) {
        while (cin >> ignored) {
            cout << "0 ";
        }
        return 0;
    }
    vector<ll> nums(n);
    std::multiset<ll> sorted_nums;
    for (ll i = cpt; i < k; i++) {
        cpt++;
        cin >> nums[i];
        sorted_nums.insert(nums[i]);
    }
    auto med = sorted_nums.begin();
    for (ll i = 0; i < (k - 1) / 2; i++)
        med++;
    ll tot = 0;
    for (ll i = 0; i < k; i++) {
        tot += std::abs(nums[i] - *med);
    }
    cout << tot << " ";
    ll current;
    for (; cpt < n; cpt++) {
        cin >> current;
        nums[cpt] = current;
        first = nums[cpt - k];
        ll valmed = *med;
        sorted_nums.insert(current);
        if (first != current) {
            if (first == valmed) {
                if (current < valmed) {
                    med--;
                } else {
                    med++;
                }
            } else if (current == valmed) {
                if (first < valmed) {
                    med++;
                } else {
                    med--;
                }
            } else if (current > valmed && first < valmed) {
                med++;
            } else if (current < valmed && first > valmed) {
                med--;
            }
        }
        sorted_nums.erase(sorted_nums.find(first));
        if (first != current || (first == valmed && current == *med)) {
            if ((k & 1) == 1) {
                ll old_med_dist, new_med_dist;
                old_med_dist = std::abs(first - valmed);
                new_med_dist = std::abs(current - valmed);
                tot += new_med_dist - old_med_dist - std::abs(valmed - *med);
            } else {
                ll old_med_dist, new_med_dist;
                bool inc = false;
                std::_Rb_tree_const_iterator<long long int> ittmp;
                if (first == valmed) {
                    inc = true;
                    ittmp = med;
                    med = sorted_nums.upper_bound(first);
                }
                old_med_dist = std::abs(first - *med);
                new_med_dist = std::abs(current - *med);
                if (inc)
                    med = ittmp;
                tot += new_med_dist - old_med_dist;
            }
        }
        cout << tot << " ";
    }
    return 0;
}


battledev 26 nov 2020
ll hh(string s) {
    ll cnt = 0;
    for (ll i = s.length() - 1; i >= 0; i--) {
        cnt = (cnt + ll(s[s.length() - i - 1] * std::pow(31, i))) % 4294967296;
    }
    return cnt;
}