collecting numbers II

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    auto start = std::chrono::high_resolution_clock::now();
    ll n, m, tmp1, tmp2;
    cin >> n >> m;
    vector<ll> nums(n);
    bitset<200001> bs;
    ll cnt;
    for (ll i = 0; i < n; i++) {
        cin >> nums[i];
    }
    for (ll i = 0; i < m; i++) {
        cnt = 0;
        bs = 0;
        cin >> tmp1 >> tmp2, tmp1--, tmp2--;
        swap(nums[tmp1], nums[tmp2]);
        for(ll x: nums) {
            if (!bs[x - 1])
                cnt++;
            bs[x] = 1;
        }
        println(cnt);
    }
    elapsed_time(start);
    return 0;
}

// TODO refaire sliding median --'


Sliding Cost

#include <iostream>
#include <algorithm>
#include <queue>
#include <unordered_map>
#include <map>
#include <list>
#include <vector>
#include <set>
#include <iterator>
#include <cmath>

using ll = long long;
using std::ios, std::cin, std::cout, std::vector, std::pair;
#define endl "\n"
#define MOD ll(1e9+7)

int main() {
//    ios::sync_with_stdio(false);
//    cin.tie(nullptr);
    ll n, k, ignored, cpt = 0, first;
    cin >> n >> k;
    if (k == 1) {
        while (cin >> ignored) {
            cout << "0 ";
        }
        return 0;
    }
    vector<ll> nums(n);
    std::multiset<ll> sorted_nums;
    for (ll i = cpt; i < k; i++) {
        cpt++;
        cin >> nums[i];
        sorted_nums.insert(nums[i]);
    }
    auto med = sorted_nums.begin();
    for (ll i = 0; i < (k - 1) / 2; i++)
        med++;
    ll tot = 0;
    for (ll i = 0; i < k; i++) {
        tot += std::abs(nums[i] - *med);
    }
    cout << tot << " ";
    ll current;
    for (; cpt < n; cpt++) {
        cin >> current;
        nums[cpt] = current;
        first = nums[cpt - k];
        ll valmed = *med;
        sorted_nums.insert(current);
        if (first != current) {
            if (first == valmed) {
                if (current < valmed) {
                    med--;
                } else {
                    med++;
                }
            } else if (current == valmed) {
                if (first < valmed) {
                    med++;
                } else {
                    med--;
                }
            } else if (current > valmed && first < valmed) {
                med++;
            } else if (current < valmed && first > valmed) {
                med--;
            }
        }
        sorted_nums.erase(sorted_nums.find(first));
        if (first != current || (first == valmed && current == *med)) {
            if ((k & 1) == 1) {
                ll old_med_dist, new_med_dist;
                old_med_dist = std::abs(first - valmed);
                new_med_dist = std::abs(current - valmed);
                tot += new_med_dist - old_med_dist - std::abs(valmed - *med);
            } else {
                ll old_med_dist, new_med_dist;
                bool inc = false;
                std::_Rb_tree_const_iterator<long long int> ittmp;
                if (first == valmed) {
                    inc = true;
                    ittmp = med;
                    med = sorted_nums.upper_bound(first);
                }
                old_med_dist = std::abs(first - *med);
                new_med_dist = std::abs(current - *med);
                if (inc)
                    med = ittmp;
                tot += new_med_dist - old_med_dist;
            }
        }
        cout << tot << " ";
    }
    return 0;
}


battledev 26 nov 2020
ll hh(string s) {
    ll cnt = 0;
    for (ll i = s.length() - 1; i >= 0; i--) {
        cnt = (cnt + ll(s[s.length() - i - 1] * std::pow(31, i))) % 4294967296;
    }
    return cnt;
}